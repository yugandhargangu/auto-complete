{"version":3,"sources":["../../../projects/auto-complete/src/lib/auto-complete.service.ts","../../../projects/auto-complete/src/lib/auto-complete.component.ts","../../../projects/auto-complete/src/lib/auto-complete.directive.ts","../../../projects/auto-complete/src/lib/auto-complete.module.ts"],"names":["NguiAutoComplete","http","this","prototype","filter","list","keyword","matchFormatted","accentInsensitive","_this","el","objStr","getFormattedListItem","toLowerCase","JSON","stringify","normalize","replace","indexOf","data","formatted","formatter","listFormatter","apply","matches","match","forEach","key","getRemoteData","source","TypeError","Error","replacementWord","url","get","pipe","map","pathToData","split","prop","Injectable","args","providedIn","HttpClient","decorators","type","Optional","NguiAutoCompleteComponent","elementRef","autoComplete","timer","autocomplete","minChars","acceptUserInput","loadingText","loadingTemplate","showInputTag","showDropdownOnInit","tabToSelect","autoSelectFirstItem","selectOnBlur","reFocusAfterSelect","headerItemTemplate","ignoreAccents","valueSelected","EventEmitter","customSelected","textEntered","dropdownVisible","isLoading","filteredList","minCharsEntered","itemIndex","delay","callback","ms","clearTimeout","setTimeout","selectOnEnter","reloadListInDelay","evt","delayMs","isSrcArr","target","value","reloadList","inputElKeyHandler","totalNumItem","length","keyCode","selectOne","undefined","scrollToView","sum","preventDefault","nativeElement","ngOnInit","autoCompleteInput","focus","showDropdownList","Array","isArray","event","hideDropdownList","findItemFromSelectValue","selectText","matchingItems","item","maxNumList","slice","subscribe","resp","error","emit","enterText","blurHandler","index","ul","autoCompleteContainer","querySelector","liHeight","offsetHeight","scrollTop","viewport","scrollOffset","trackByIndex","Object","defineProperty","Component","selector","template","encapsulation","ViewEncapsulation","None","ElementRef","Input","Output","ViewChild","NguiAutoCompleteDirective","resolver","viewContainerRef","parentForm","openOnFocus","closeOnFocusOut","zIndex","isRtl","ngModelChange","valueChanged","showAutoCompleteDropdown","dropdownJustHidden","hideAutoCompleteDropdown","scheduledBlurHandler","factory","resolveComponentFactory","componentRef","createComponent","component","instance","inputEl","placeholder","autoCompletePlaceholder","parseInt","blankOptionText","noMatchFoundText","selectNewValue","enterNewText","selectCustomValue","acDropdownEl","location","style","display","parentElement","insertBefore","nextSibling","revertValue","ngModel","styleAutoCompleteDropdown","currentItem","hasRevertValue","destroy","getBoundingClientRect","thisInputElBCR","closeToBottom","bottom","window","innerHeight","directionOfStyle","width","position","height","top","setToStringFunction","renderValue","val","selectValueOf","formControlName","extFormControl","formControl","patchValue","text","keydownEventHandler","inputEventHandler","element","documentClickListener","e","document","addEventListener","wrapperEl","createElement","className","appendChild","FormGroupName","control","controls","ngAfterViewInit","tagName","setAttribute","ngOnDestroy","unsubscribe","removeEventListener","ngOnChanges","changes","currentValue","displayVal_1","valueFormatter","formatted_1","displayPropertyName","toString","Directive","ComponentFactoryResolver","ViewContainerRef","ControlContainer","Host","SkipSelf","NgModule","declarations","imports","CommonModule","FormsModule","exports"],"mappings":"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","sourcesContent":["import { Injectable, Optional } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NguiAutoComplete {\n\n  public source: string;\n  public pathToData: string;\n  public listFormatter: (arg: any) => string;\n\n  constructor(@Optional() private http: HttpClient) {\n    // ...\n  }\n\n  public filter(list: any[], keyword: string, matchFormatted: boolean, accentInsensitive: boolean) {\n    return accentInsensitive\n      ? list.filter(\n        (el) => {\n          const objStr = matchFormatted ? this.getFormattedListItem(el).toLowerCase() : JSON.stringify(el).toLowerCase();\n          keyword = keyword.toLowerCase();\n\n          return objStr.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\n            .indexOf(keyword.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')) !== -1;\n        })\n      : list.filter(\n        (el) => {\n          const objStr = matchFormatted ? this.getFormattedListItem(el).toLowerCase() : JSON.stringify(el).toLowerCase();\n          keyword = keyword.toLowerCase();\n\n          return objStr.indexOf(keyword) !== -1;\n        }\n      );\n  }\n\n  public getFormattedListItem(data: any) {\n    let formatted;\n    const formatter = this.listFormatter || '(id) value';\n    if (typeof formatter === 'function') {\n      formatted = formatter.apply(this, [data]);\n    } else if (typeof data !== 'object') {\n      formatted = data;\n    } else if (typeof formatter === 'string') {\n      formatted = formatter;\n      const matches = formatter.match(/[a-zA-Z0-9_\\$]+/g);\n      if (matches && typeof data !== 'string') {\n        matches.forEach((key) => {\n          formatted = formatted.replace(key, data[key]);\n        });\n      }\n    }\n    return formatted;\n  }\n\n  /**\n   * return remote data from the given source and options, and data path\n   */\n  public getRemoteData(keyword: string): Observable<any[]> {\n    if (typeof this.source !== 'string') {\n      throw new TypeError('Invalid type of source, must be a string. e.g. http://www.google.com?q=:my_keyword');\n    } else if (!this.http) {\n      throw new Error('Http is required.');\n    }\n\n    const matches = this.source.match(/:[a-zA-Z_]+/);\n    if (matches === null) {\n      throw new Error('Replacement word is missing.');\n    }\n\n    const replacementWord = matches[0];\n    const url = this.source.replace(replacementWord, keyword);\n\n    return this.http.get<any[]>(url)\n      .pipe(\n        map((list) => {\n\n          if (this.pathToData) {\n            const paths = this.pathToData.split('.');\n            paths.forEach((prop) => list = list[prop]);\n          }\n\n          return list;\n        })\n      );\n  }\n}\n","import { Component, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { NguiAutoComplete } from './auto-complete.service';\n\n@Component({\n  selector: 'ngui-auto-complete',\n  template: `\n    <div #autoCompleteContainer class=\"ngui-auto-complete\">\n      <!-- keyword input -->\n      <input *ngIf=\"showInputTag\"\n             #autoCompleteInput class=\"keyword\"\n             [attr.autocomplete]=\"autocomplete ? 'null' : 'off'\"\n             placeholder=\"{{placeholder}}\"\n             (focus)=\"showDropdownList($event)\"\n             (blur)=\"blurHandler($event)\"\n             (keydown)=\"inputElKeyHandler($event)\"\n             (input)=\"reloadListInDelay($event)\"\n             [(ngModel)]=\"keyword\"/>\n\n      <!-- dropdown that user can select -->\n      <ul *ngIf=\"dropdownVisible\" [class.empty]=\"emptyList\">\n        <li *ngIf=\"isLoading && loadingTemplate\" class=\"loading\"\n            [innerHTML]=\"loadingTemplate\"></li>\n        <li *ngIf=\"isLoading && !loadingTemplate\" class=\"loading\">{{loadingText}}</li>\n        <li *ngIf=\"minCharsEntered && !isLoading && !filteredList.length\"\n            (mousedown)=\"selectOne('')\"\n            class=\"no-match-found\">{{noMatchFoundText || 'No Result Found'}}\n        </li>\n        <li *ngIf=\"headerItemTemplate && filteredList.length\" class=\"header-item\"\n            [innerHTML]=\"headerItemTemplate\"></li>\n        <li *ngIf=\"blankOptionText && filteredList.length\"\n            (mousedown)=\"selectOne('')\"\n            class=\"blank-item\">{{blankOptionText}}\n        </li>\n        <li class=\"item\"\n            *ngFor=\"let item of filteredList; let i=index; trackBy: trackByIndex\"\n            (mousedown)=\"selectOne(item)\"\n            [ngClass]=\"{selected: i === itemIndex}\"\n            [innerHtml]=\"autoComplete.getFormattedListItem(item)\">\n        </li>\n      </ul>\n\n    </div>\n  `,\n  styles: [`\n    @keyframes slideDown {\n      0% {\n        transform: translateY(-10px);\n      }\n      100% {\n        transform: translateY(0px);\n      }\n    }\n\n    .ngui-auto-complete {\n      background-color: transparent;\n    }\n\n    .ngui-auto-complete > input {\n      outline: none;\n      border: 0;\n      padding: 2px;\n      box-sizing: border-box;\n      background-clip: content-box;\n    }\n\n    .ngui-auto-complete > ul {\n      background-color: #fff;\n      margin: 0;\n      width: 100%;\n      overflow-y: auto;\n      list-style-type: none;\n      padding: 0;\n      border: 1px solid #ccc;\n      box-sizing: border-box;\n      animation: slideDown 0.1s;\n    }\n\n    .ngui-auto-complete > ul.empty {\n      display: none;\n    }\n\n    .ngui-auto-complete > ul li {\n      padding: 2px 5px;\n      border-bottom: 1px solid #eee;\n    }\n\n    .ngui-auto-complete > ul li.selected {\n      background-color: #ccc;\n    }\n\n    .ngui-auto-complete > ul li:last-child {\n      border-bottom: none;\n    }\n\n    .ngui-auto-complete > ul li:not(.header-item):hover {\n      background-color: #ccc;\n    }`\n  ],\n  encapsulation: ViewEncapsulation.None\n})\nexport class NguiAutoCompleteComponent implements OnInit {\n\n  /**\n   * public input properties\n   */\n  @Input('autocomplete') public autocomplete = false;\n  @Input('list-formatter') public listFormatter: (arg: any) => string;\n  @Input('source') public source: any;\n  @Input('path-to-data') public pathToData: string;\n  @Input('min-chars') public minChars = 0;\n  @Input('placeholder') public placeholder: string;\n  @Input('blank-option-text') public blankOptionText: string;\n  @Input('no-match-found-text') public noMatchFoundText: string;\n  @Input('accept-user-input') public acceptUserInput = true;\n  @Input('loading-text') public loadingText = 'Loading';\n  @Input('loading-template') public loadingTemplate = null;\n  @Input('max-num-list') public maxNumList: number;\n  @Input('show-input-tag') public showInputTag = true;\n  @Input('show-dropdown-on-init') public showDropdownOnInit = false;\n  @Input('tab-to-select') public tabToSelect = true;\n  @Input('match-formatted') public matchFormatted = false;\n  @Input('auto-select-first-item') public autoSelectFirstItem = false;\n  @Input('select-on-blur') public selectOnBlur = false;\n  @Input('re-focus-after-select') public reFocusAfterSelect = true;\n  @Input('header-item-template') public headerItemTemplate = null;\n  @Input('ignore-accents') public ignoreAccents = true;\n\n  @Output() public valueSelected = new EventEmitter();\n  @Output() public customSelected = new EventEmitter();\n  @Output() public textEntered = new EventEmitter();\n\n  @ViewChild('autoCompleteInput') public autoCompleteInput: ElementRef;\n  @ViewChild('autoCompleteContainer') public autoCompleteContainer: ElementRef;\n\n  public dropdownVisible = false;\n  public isLoading = false;\n\n  public filteredList: any[] = [];\n  public minCharsEntered = false;\n  public itemIndex: number = null;\n  public keyword: string;\n\n  private el: HTMLElement;           // this component  element `<ngui-auto-complete>`\n  private timer = 0;\n\n  private delay = (() => {\n    let timer = null;\n    return (callback: any, ms: number) => {\n      clearTimeout(timer);\n      timer = setTimeout(callback, ms);\n    };\n  })();\n  private selectOnEnter = false;\n\n  /**\n   * constructor\n   */\n  constructor(elementRef: ElementRef, public autoComplete: NguiAutoComplete) {\n    this.el = elementRef.nativeElement;\n  }\n\n  /**\n   * user enters into input el, shows list to select, then select one\n   */\n  ngOnInit(): void {\n    this.autoComplete.source = this.source;\n    this.autoComplete.pathToData = this.pathToData;\n    this.autoComplete.listFormatter = this.listFormatter;\n    if (this.autoSelectFirstItem) {\n      this.itemIndex = 0;\n    }\n    setTimeout(() => {\n      if (this.autoCompleteInput && this.reFocusAfterSelect) {\n        this.autoCompleteInput.nativeElement.focus();\n      }\n      if (this.showDropdownOnInit) {\n        this.showDropdownList({target: {value: ''}});\n      }\n    });\n  }\n\n  public isSrcArr(): boolean {\n    return Array.isArray(this.source);\n  }\n\n  public reloadListInDelay = (evt: any): void => {\n    const delayMs = this.isSrcArr() ? 10 : 500;\n    const keyword = evt.target.value;\n\n    // executing after user stopped typing\n    this.delay(() => this.reloadList(keyword), delayMs);\n  }\n\n  public showDropdownList(event: any): void {\n    this.dropdownVisible = true;\n    this.reloadList(event.target.value);\n  }\n\n  public hideDropdownList(): void {\n    this.selectOnEnter = false;\n    this.dropdownVisible = false;\n  }\n\n  public findItemFromSelectValue(selectText: string): any {\n    const matchingItems = this.filteredList.filter((item) => ('' + item) === selectText);\n    return matchingItems.length ? matchingItems[0] : null;\n  }\n\n  public reloadList(keyword: string): void {\n\n    this.filteredList = [];\n    if (keyword.length < (this.minChars || 0)) {\n      this.minCharsEntered = false;\n      return;\n    } else {\n      this.minCharsEntered = true;\n    }\n\n    if (this.isSrcArr()) {    // local source\n      this.isLoading = false;\n      this.filteredList = this.autoComplete.filter(this.source, keyword, this.matchFormatted, this.ignoreAccents);\n      if (this.maxNumList) {\n        this.filteredList = this.filteredList.slice(0, this.maxNumList);\n      }\n\n    } else {                 // remote source\n      this.isLoading = true;\n\n      if (typeof this.source === 'function') {\n        // custom function that returns observable\n        this.source(keyword).subscribe(\n          (resp) => {\n\n            if (this.pathToData) {\n              const paths = this.pathToData.split('.');\n              paths.forEach((prop) => resp = resp[prop]);\n            }\n\n            this.filteredList = resp;\n            if (this.maxNumList) {\n              this.filteredList = this.filteredList.slice(0, this.maxNumList);\n            }\n          },\n          (error) => null,\n          () => this.isLoading = false // complete\n        );\n      } else {\n        // remote source\n\n        this.autoComplete.getRemoteData(keyword).subscribe((resp) => {\n            this.filteredList = resp ? resp : [];\n            if (this.maxNumList) {\n              this.filteredList = this.filteredList.slice(0, this.maxNumList);\n            }\n          },\n          (error) => null,\n          () => this.isLoading = false // complete\n        );\n      }\n    }\n  }\n\n  public selectOne(data: any) {\n    if (!!data || data === '') {\n      this.valueSelected.emit(data);\n    } else {\n      this.customSelected.emit(this.keyword);\n    }\n  }\n\n  public enterText(data: any) {\n    this.textEntered.emit(data);\n  }\n\n  public blurHandler(evt: any) {\n    if (this.selectOnBlur) {\n      this.selectOne(this.filteredList[this.itemIndex]);\n    }\n\n    this.hideDropdownList();\n  }\n\n  public inputElKeyHandler = (evt: any) => {\n    const totalNumItem = this.filteredList.length;\n\n    if (!this.selectOnEnter && this.autoSelectFirstItem && (0 !== totalNumItem)) {\n      this.selectOnEnter = true;\n    }\n\n    switch (evt.keyCode) {\n      case 27: // ESC, hide auto complete\n        this.selectOnEnter = false;\n        this.selectOne(undefined);\n        break;\n\n      case 38: // UP, select the previous li el\n        if (0 === totalNumItem) {\n          return;\n        }\n        this.selectOnEnter = true;\n        this.itemIndex = (totalNumItem + this.itemIndex - 1) % totalNumItem;\n        this.scrollToView(this.itemIndex);\n        break;\n\n      case 40: // DOWN, select the next li el or the first one\n        if (0 === totalNumItem) {\n          return;\n        }\n        this.selectOnEnter = true;\n        this.dropdownVisible = true;\n        let sum = this.itemIndex;\n        sum = (this.itemIndex === null) ? 0 : sum + 1;\n        this.itemIndex = (totalNumItem + sum) % totalNumItem;\n        this.scrollToView(this.itemIndex);\n        break;\n\n      case 13: // ENTER, choose it!!\n        if (this.selectOnEnter) {\n          this.selectOne(this.filteredList[this.itemIndex]);\n        }\n        evt.preventDefault();\n        break;\n\n      case 9: // TAB, choose if tab-to-select is enabled\n        if (this.tabToSelect) {\n          this.selectOne(this.filteredList[this.itemIndex]);\n        }\n        break;\n    }\n  }\n\n  public scrollToView(index) {\n    const container = this.autoCompleteContainer.nativeElement;\n    const ul = container.querySelector('ul');\n    const li = ul.querySelector('li');  // just sample the first li to get height\n    const liHeight = li.offsetHeight;\n    const scrollTop = ul.scrollTop;\n    const viewport = scrollTop + ul.offsetHeight;\n    const scrollOffset = liHeight * index;\n    if (scrollOffset < scrollTop || (scrollOffset + liHeight) > viewport) {\n      ul.scrollTop = scrollOffset;\n    }\n  }\n\n  public trackByIndex(index, item) {\n    return index;\n  }\n\n  get emptyList(): boolean {\n    return !(\n      this.isLoading ||\n      (this.minCharsEntered && !this.isLoading && !this.filteredList.length) ||\n      (this.filteredList.length)\n    );\n  }\n\n}\n","import {\n  AfterViewInit, ComponentFactoryResolver,\n  ComponentRef,\n  Directive,\n  EventEmitter, Host,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit, Optional,\n  Output, SimpleChanges, SkipSelf, ViewContainerRef\n} from '@angular/core';\nimport { AbstractControl, ControlContainer, FormControl, FormGroup, FormGroupName } from '@angular/forms';\nimport { NguiAutoCompleteComponent } from './auto-complete.component';\n\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: '[auto-complete], [ngui-auto-complete]'\n})\nexport class NguiAutoCompleteDirective implements OnInit, OnChanges, AfterViewInit, OnDestroy {\n\n  @Input('autocomplete') public autocomplete = false;\n  @Input('auto-complete-placeholder') public autoCompletePlaceholder: string;\n  @Input('source') public source: any;\n  @Input('path-to-data') public pathToData: string;\n  @Input('min-chars') public minChars: number;\n  @Input('display-property-name') public displayPropertyName: string;\n  @Input('accept-user-input') public acceptUserInput = true;\n  @Input('max-num-list') public maxNumList: string;\n  @Input('select-value-of') public selectValueOf: string;\n  @Input('loading-template') public loadingTemplate = null;\n  @Input('list-formatter') public listFormatter;\n  @Input('loading-text') public loadingText = 'Loading';\n  @Input('blank-option-text') public blankOptionText: string;\n  @Input('no-match-found-text') public noMatchFoundText: string;\n  @Input('value-formatter') public valueFormatter: any;\n  @Input('tab-to-select') public tabToSelect = true;\n  @Input('select-on-blur') public selectOnBlur = false;\n  @Input('match-formatted') public matchFormatted = false;\n  @Input('auto-select-first-item') public autoSelectFirstItem = false;\n  @Input('open-on-focus') public openOnFocus = true;\n  @Input('close-on-focusout') public closeOnFocusOut = true;\n  @Input('re-focus-after-select') public reFocusAfterSelect = true;\n  @Input('header-item-template') public headerItemTemplate = null;\n  @Input('ignore-accents') public ignoreAccents = true;\n\n  @Input() public ngModel: string;\n  @Input('formControlName') public formControlName: string;\n  // if [formControl] is used on the anchor where our directive is sitting\n  // a form is not necessary to use a formControl we should also support this\n  @Input('formControl') public extFormControl: FormControl;\n  @Input('z-index') public zIndex = '1';\n  @Input('is-rtl') public isRtl = false;\n\n  @Output() public ngModelChange = new EventEmitter();\n  @Output() public valueChanged = new EventEmitter();\n  @Output() public customSelected = new EventEmitter();\n\n  private componentRef: ComponentRef<NguiAutoCompleteComponent>;\n  private wrapperEl: HTMLElement;\n  private el: HTMLElement;   // this element element, can be any\n  private acDropdownEl: HTMLElement; // auto complete element\n  private inputEl: HTMLInputElement;  // input element of this element\n  private formControl: AbstractControl;\n  private revertValue: any;\n  private dropdownJustHidden: boolean;\n  private scheduledBlurHandler: any;\n  private documentClickListener: (e: MouseEvent) => any;\n\n  constructor(private resolver: ComponentFactoryResolver,\n              public  viewContainerRef: ViewContainerRef,\n              @Optional() @Host() @SkipSelf() private parentForm: ControlContainer) {\n    this.el = this.viewContainerRef.element.nativeElement;\n  }\n\n  ngOnInit(): void {\n    // Blur event is handled only after a click event.\n    // This is to prevent handling of blur events resulting from interacting with a scrollbar\n    // introduced by content overflow (Internet explorer issue).\n    // See issue description here: http://stackoverflow.com/questions/2023779/clicking-on-a-divs-scroll-bar-fires-the-blur-event-in-ie\n    this.documentClickListener = (e) => {\n      if (this.scheduledBlurHandler) {\n        this.scheduledBlurHandler();\n        this.scheduledBlurHandler = null;\n      }\n    };\n\n    document.addEventListener('click', this.documentClickListener);\n    // wrap this element with <div class=\"ngui-auto-complete\">\n    this.wrapperEl = document.createElement('div');\n    this.wrapperEl.className = 'ngui-auto-complete-wrapper';\n    this.wrapperEl.style.position = 'relative';\n    this.el.parentElement.insertBefore(this.wrapperEl, this.el.nextSibling);\n    this.wrapperEl.appendChild(this.el);\n\n    // Check if we were supplied with a [formControlName] and it is inside a [form]\n    // else check if we are supplied with a [FormControl] regardless if it is inside a [form] tag\n    if (this.parentForm && this.formControlName) {\n      if (this.parentForm['form']) {\n        this.formControl = (this.parentForm['form'] as FormGroup).get(this.formControlName);\n      } else if (this.parentForm instanceof FormGroupName) {\n        this.formControl = (this.parentForm as FormGroupName).control.controls[this.formControlName];\n      }\n    } else if (this.extFormControl) {\n      this.formControl = this.extFormControl;\n    }\n\n    // apply toString() method for the object\n    if (!!this.ngModel) {\n      this.selectNewValue(this.ngModel);\n    } else if (!!this.formControl && this.formControl.value) {\n      this.selectNewValue(this.formControl.value);\n    }\n\n  }\n\n  ngAfterViewInit() {\n    // if this element is not an input tag, move dropdown after input tag\n    // so that it displays correctly\n    this.inputEl = this.el.tagName === 'INPUT' ? this.el as HTMLInputElement : this.el.querySelector('input');\n\n    if (this.openOnFocus) {\n      this.inputEl.addEventListener('focus', (e) => this.showAutoCompleteDropdown(e));\n    }\n\n    if (this.closeOnFocusOut) {\n      this.inputEl.addEventListener('focusout', (e) => this.hideAutoCompleteDropdown(e));\n    }\n\n    if (!this.autocomplete) {\n      this.inputEl.setAttribute('autocomplete', 'off');\n    }\n    this.inputEl.addEventListener('blur', (e) => {\n      this.scheduledBlurHandler = () => {\n        return this.blurHandler(e);\n      };\n    });\n    this.inputEl.addEventListener('keydown', (e) => this.keydownEventHandler(e));\n    this.inputEl.addEventListener('input', (e) => this.inputEventHandler(e));\n  }\n\n  ngOnDestroy(): void {\n    if (this.componentRef) {\n      this.componentRef.instance.valueSelected.unsubscribe();\n      this.componentRef.instance.textEntered.unsubscribe();\n    }\n    if (this.documentClickListener) {\n      document.removeEventListener('click', this.documentClickListener);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['ngModel']) {\n      this.ngModel = this.setToStringFunction(changes['ngModel'].currentValue);\n      this.renderValue(this.ngModel);\n    }\n  }\n\n  // show auto-complete list below the current element\n  public showAutoCompleteDropdown = (event?: any): void => {\n    if (this.dropdownJustHidden) {\n      return;\n    }\n    this.hideAutoCompleteDropdown();\n    this.scheduledBlurHandler = null;\n\n    const factory = this.resolver.resolveComponentFactory(NguiAutoCompleteComponent);\n\n    this.componentRef = this.viewContainerRef.createComponent(factory);\n\n    const component = this.componentRef.instance;\n    component.keyword = this.inputEl.value;\n    component.showInputTag = false; // Do NOT display autocomplete input tag separately\n\n    component.pathToData = this.pathToData;\n    component.minChars = this.minChars;\n    component.source = this.source;\n    component.placeholder = this.autoCompletePlaceholder;\n    component.acceptUserInput = this.acceptUserInput;\n    component.maxNumList = parseInt(this.maxNumList, 10);\n\n    component.loadingText = this.loadingText;\n    component.loadingTemplate = this.loadingTemplate;\n    component.listFormatter = this.listFormatter;\n    component.blankOptionText = this.blankOptionText;\n    component.noMatchFoundText = this.noMatchFoundText;\n    component.tabToSelect = this.tabToSelect;\n    component.selectOnBlur = this.selectOnBlur;\n    component.matchFormatted = this.matchFormatted;\n    component.autoSelectFirstItem = this.autoSelectFirstItem;\n    component.headerItemTemplate = this.headerItemTemplate;\n    component.ignoreAccents = this.ignoreAccents;\n\n    component.valueSelected.subscribe(this.selectNewValue);\n    component.textEntered.subscribe(this.enterNewText);\n    component.customSelected.subscribe(this.selectCustomValue);\n\n    this.acDropdownEl = this.componentRef.location.nativeElement;\n    this.acDropdownEl.style.display = 'none';\n\n    // if this element is not an input tag, move dropdown after input tag\n    // so that it displays correctly\n\n    // TODO: confirm with owners\n    // with some reason, viewContainerRef.createComponent is creating element\n    // to parent div which is created by us on ngOnInit, please try this with demo\n\n    // if (this.el.tagName !== 'INPUT' && this.acDropdownEl) {\n    this.inputEl.parentElement.insertBefore(this.acDropdownEl, this.inputEl.nextSibling);\n    // }\n    this.revertValue = typeof this.ngModel !== 'undefined' ? this.ngModel : this.inputEl.value;\n\n    setTimeout(() => {\n      component.reloadList(this.inputEl.value);\n      this.styleAutoCompleteDropdown();\n      component.dropdownVisible = true;\n    });\n  }\n\n  public blurHandler(event: any) {\n    if (this.componentRef) {\n      const component = this.componentRef.instance;\n\n      if (this.selectOnBlur) {\n        component.selectOne(component.filteredList[component.itemIndex]);\n      }\n\n      if (this.closeOnFocusOut) {\n        this.hideAutoCompleteDropdown(event);\n      }\n    }\n  }\n\n  public hideAutoCompleteDropdown = (event?: any): void => {\n    if (this.componentRef) {\n      let currentItem: any;\n      const hasRevertValue = (typeof this.revertValue !== 'undefined');\n      if (this.inputEl && hasRevertValue && this.acceptUserInput === false) {\n        currentItem = this.componentRef.instance.findItemFromSelectValue(this.inputEl.value);\n      }\n      this.componentRef.destroy();\n      this.componentRef = undefined;\n\n      if (this.inputEl && hasRevertValue && this.acceptUserInput === false && currentItem === null) {\n        this.selectNewValue(this.revertValue);\n      } else if (this.inputEl && this.acceptUserInput === true && typeof currentItem === 'undefined' && event && event.target.value) {\n        this.enterNewText(event.target.value);\n      }\n    }\n    this.dropdownJustHidden = true;\n    setTimeout(() => this.dropdownJustHidden = false, 100);\n  }\n\n  public styleAutoCompleteDropdown = () => {\n    if (this.componentRef) {\n      const component = this.componentRef.instance;\n\n      /* setting width/height auto complete */\n      const thisElBCR = this.el.getBoundingClientRect();\n      const thisInputElBCR = this.inputEl.getBoundingClientRect();\n      const closeToBottom = thisInputElBCR.bottom + 100 > window.innerHeight;\n      const directionOfStyle = this.isRtl ? 'right' : 'left';\n\n      this.acDropdownEl.style.width = thisInputElBCR.width + 'px';\n      this.acDropdownEl.style.position = 'absolute';\n      this.acDropdownEl.style.zIndex = this.zIndex;\n      this.acDropdownEl.style[directionOfStyle] = '0';\n      this.acDropdownEl.style.display = 'inline-block';\n\n      if (closeToBottom) {\n        this.acDropdownEl.style.bottom = `${thisInputElBCR.height}px`;\n      } else {\n        this.acDropdownEl.style.top = `${thisInputElBCR.height}px`;\n      }\n    }\n  }\n\n  public setToStringFunction(item: any): any {\n    if (item && typeof item === 'object') {\n      let displayVal;\n\n      if (typeof this.valueFormatter === 'string') {\n        const matches = this.valueFormatter.match(/[a-zA-Z0-9_\\$]+/g);\n        let formatted = this.valueFormatter;\n        if (matches && typeof item !== 'string') {\n          matches.forEach((key) => {\n            formatted = formatted.replace(key, item[key]);\n          });\n        }\n        displayVal = formatted;\n      } else if (typeof this.valueFormatter === 'function') {\n        displayVal = this.valueFormatter(item);\n      } else if (this.displayPropertyName) {\n        displayVal = item[this.displayPropertyName];\n      } else if (typeof this.listFormatter === 'string' && this.listFormatter.match(/^\\w+$/)) {\n        displayVal = item[this.listFormatter];\n      } else {\n        displayVal = item.value;\n      }\n      item.toString = () => displayVal;\n    }\n    return item;\n  }\n\n  public selectNewValue = (item: any) => {\n    // make displayable value\n    if (item && typeof item === 'object') {\n      item = this.setToStringFunction(item);\n    }\n\n    this.renderValue(item);\n\n    // make return value\n    let val = item;\n    if (this.selectValueOf && item[this.selectValueOf]) {\n      val = item[this.selectValueOf];\n    }\n    if ((this.parentForm && this.formControlName) || this.extFormControl) {\n      if (!!val) {\n        this.formControl.patchValue(val);\n      }\n    }\n    if (val !== this.ngModel) {\n      this.ngModelChange.emit(val);\n    }\n    this.valueChanged.emit(val);\n    this.hideAutoCompleteDropdown();\n    setTimeout(() => {\n      if (this.reFocusAfterSelect) {\n        this.inputEl.focus();\n      }\n\n      return this.inputEl;\n    });\n  }\n\n  public selectCustomValue = (text: string) => {\n    this.customSelected.emit(text);\n    this.hideAutoCompleteDropdown();\n    setTimeout(() => {\n      if (this.reFocusAfterSelect) {\n        this.inputEl.focus();\n      }\n\n      return this.inputEl;\n    });\n  }\n\n  public enterNewText = (value: any) => {\n    this.renderValue(value);\n    this.ngModelChange.emit(value);\n    this.valueChanged.emit(value);\n    this.hideAutoCompleteDropdown();\n  }\n\n  private keydownEventHandler = (evt: any) => {\n    if (this.componentRef) {\n      const component = this.componentRef.instance;\n      component.inputElKeyHandler(evt);\n    }\n  }\n\n  private inputEventHandler = (evt: any) => {\n    if (this.componentRef) {\n      const component = this.componentRef.instance;\n      component.dropdownVisible = true;\n      component.keyword = evt.target.value;\n      component.reloadListInDelay(evt);\n    } else {\n      this.showAutoCompleteDropdown();\n    }\n  }\n\n  private renderValue(item: any) {\n    if (!!this.inputEl) {\n      this.inputEl.value = '' + item;\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { NguiAutoCompleteComponent } from './auto-complete.component';\nimport { NguiAutoCompleteDirective } from './auto-complete.directive';\n\n@NgModule({\n  declarations: [\n    NguiAutoCompleteComponent,\n    NguiAutoCompleteDirective\n  ],\n  imports: [\n    CommonModule,\n    FormsModule\n  ],\n  exports: [\n    NguiAutoCompleteComponent,\n    NguiAutoCompleteDirective\n  ]\n})\nexport class NguiAutoCompleteModule { }\n"]}